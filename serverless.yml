org: photonadmin # Corresponds to the serverless.com account used for monitoring
app: photonranch

service: photonranch-jobs

package:
  patterns:
    - '!venv/**'
    - '!node_modules/**'

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-pitr
  - serverless-domain-manager

custom:

  # This is the 'variable' for the customDomain.basePath value, based on the stage.
  stage:
    prod: jobs
    dev: dev
    test: test 

  # Since lambda runs on a linux instance, we need to zip the requirements in a linux docker container.
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: false 
    useStaticCache: false

  customDomain:
    domainName: 'jobs.photonranch.org'
    basePath: ${self:custom.stage.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true
    createRoute53IPv6Record: true
    autoDomain: true

  #jobsConnectionsTable: photonranch-jobs-connections-${self:provider.stage}
  jobsTable: photonranch-jobs-${self:provider.stage}
  pitr: # enable point-in-time recovery
    - tableName: ${self:custom.jobsTable}
      enabled: true

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  runtime: python3.7
  region: us-east-1
  environment: 
    DYNAMODB_JOBS: ${self:custom.jobsTable}
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}
  iam:
    role: 
      statements:
        - Effect: Allow 
          Action: 
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            - dynamodb:BatchWriteItem
          Resource:
            #- "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.jobsTable}*"
            #- "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.jobsConnectionsTable}*"
            - "arn:aws:dynamodb:${self:provider.region}:*:*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:GetQueueUrl
          Resource:
            - "arn:aws:sqs:${self:provider.region}:*:*"

resources:
  Resources:

    # Configure API gateway "Gateway Responses" to work with CORS restrictions
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Define the dynamodb table we use to store jobs
    jobsTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.jobsTable}
        AttributeDefinitions:
          - AttributeName: site 
            AttributeType: S
          - AttributeName: ulid 
            AttributeType: S
          - AttributeName: statusId
            AttributeType: S
          - AttributeName: replicaStatusId # second independent queue for site to poll
            AttributeType: S
        KeySchema:
          - AttributeName: site 
            KeyType: HASH
          - AttributeName: ulid
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: StatusId
            KeySchema:
              - AttributeName: site
                KeyType: HASH
              - AttributeName: statusId 
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: ReplicaReadStatus
            KeySchema:
              - AttributeName: site
                KeyType: HASH
              - AttributeName: replicaStatusId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

functions:
  newJob:
    handler: src/handler.newJob
    events:
      - http:
          path: newjob
          method: post
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors: true
  updateJobStatus:
    handler: src/handler.updateJobStatus
    events:
      - http:
          path: updatejobstatus
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors: true
  getNewJobs:
    handler: src/handler.getNewJobs
    events:
      - http:
          path: getnewjobs
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors: true
  getRecentJobs:
    handler: src/handler.getRecentJobs
    events:
      - http:
          path: getrecentjobs
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors: true
  startJob:
    handler: src/handler.startJob
    events:
      - http:
          path: startjob
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors: true
  authorizerFunc: 
    handler: src/authorizer.auth

  streamFunction:
    handler: src/handler.streamHandler
    events:
      - stream: 
          type: dynamodb
          arn: 
            Fn::GetAtt:
              - jobsTable
              - StreamArn
