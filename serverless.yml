org: photonadmin # Corresponds to the serverless.com account used for monitoring
app: photonranch

service: photonranch-jobs

package:
  exclude:
    - venv/**
    - node_modules/**

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-pitr
  - serverless-domain-manager

custom:

  # This is the 'variable' for the customDomain.basePath value, based on the stage.
  # Run as `sls deploy --stage <stage_name>`
  stage:
    dev: jobs
    test: test 

  customDomain:
    domainName: 'jobs.photonranch.org'
    basePath: ${self:custom.stage.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true

  jobsConnectionsTable: photonranch-jobs-connections-${self:provider.stage}
  jobsTable: photonranch-jobs-${self:provider.stage}
  pitr: # enable point-in-time recovery
    - tableName: ${self:custom.jobsTable}
      enabled: true


provider:
  name: aws
  stage: ${opt:stage, "dev"}
  runtime: python3.7
  region: us-east-1
  websocketsApiName: websockets-photonranch-jobs
  websocketsApiRouteSelectionExpression: $request.body.action
  environment: 
    DYNAMODB_JOBS: ${self:custom.jobsTable}
    JOBS_CONNECTION_TABLE: ${self:custom.jobsConnectionsTable}
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}
    WSS_URL:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "WebsocketsApi"
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow 
      Action: 
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        # needs to work for connecitons table and jobs table. 
        # can I include two resources here? Generic connection for now.
        #- "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.jobsTable}*"
        #- "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.jobsConnectionsTable}*"
        - "arn:aws:dynamodb:${self:provider.region}:*:*"

resources: # CloudFormation template syntax from here on.
  Resources:

    # Configure API gateway "Gateway Responses" to work with CORS restrictions
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Define the dynamodb table we use to store calendar events
    messagesTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.jobsTable}
        AttributeDefinitions:
          - AttributeName: site 
            AttributeType: S
          - AttributeName: ulid 
            AttributeType: S
          - AttributeName: statusId
            AttributeType: S
        KeySchema:
          - AttributeName: site 
            KeyType: HASH
          - AttributeName: ulid
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: StatusId
            KeySchema:
              - AttributeName: site
                KeyType: HASH
              - AttributeName: statusId 
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # Store the clients that are subscribed to job status updates
    connectionsTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.jobsConnectionsTable}
        AttributeDefinitions:
          - AttributeName: ConnectionID
            AttributeType: S
        KeySchema:
          - AttributeName: ConnectionID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  authorizerFunc: 
    handler: src/authorizer.auth
    cors: true
  newJob:
    handler: src/handler.newJob
    events:
      - http:
          path: newjob
          method: post
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  updateJobStatus:
    handler: src/handler.updateJobStatus
    events:
      - http:
          path: updatejobstatus
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  getNewJobs:
    handler: src/handler.getNewJobs
    events:
      - http:
          path: getnewjobs
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  getRecentJobs:
    handler: src/handler.getRecentJobs
    events:
      - http:
          path: getrecentjobs
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  startJob:
    handler: src/handler.startJob
    events:
      - http:
          path: startjob
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  
  conectHandler:
    handler: src/handler.connection_manager
    events: 
      - websocket: 
          route: $connect
      - websocket:
          route: $disconnect

  streamFunction:
    handler: src/handler.streamHandler
    events:
      - stream: 
          type: dynamodb
          arn: 
            Fn::GetAtt:
              #- ${self:custom.jobsTable}
              #- photonranch-jobs1
              - messagesTable
              - StreamArn
